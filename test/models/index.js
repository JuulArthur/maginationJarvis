"use strict";
var chai = require('chai');
var should = chai.should();
var assert = chai.assert;
module.exports = (function(models) {
  describe("User", (function() {
    var testUser = {
      username: "test",
      password: "prompetiss"
    };
    before((function(done) {
      new models.User(testUser).save((function(err, usr) {
        should.not.exist(err);
        done();
      }));
    }));
    after((function(done) {
      models.User.remove({}, done);
    }));
    it('should be able to be found in the db', (function(done) {
      models.User.findOne({username: testUser.username}, (function(err, usr) {
        should.not.exist(err);
        should.exist(usr);
        usr.username.should.equal(testUser.username, 'retrieved username should match the saved username');
        usr.password.should.not.equal(testUser.password, 'password should be hashed before save');
        done();
      }));
    }));
    it('should be able to validate password', (function(done) {
      models.User.findOne({username: testUser.username}, (function(err, usr) {
        usr.validPassword(testUser.password, (function(err, res) {
          should.not.exist(err, 'password validation should not have errors');
          assert(res, 'password should be valid');
          done();
        }));
      }));
    }));
  }));
  describe("Election", (function() {
    var testElection = new models.Election({
      title: "test1",
      description: "prompetiss"
    });
    var testAlternative = new models.Alternative({description: 'asdadsad'});
    var testAlternative2 = new models.Alternative({description: 'asdadsadasd'});
    testElection.addAlternative(testAlternative);
    testElection.addAlternative(testAlternative2);
    before((function(done) {
      testElection.save((function(err) {
        should.not.exist(err);
        testAlternative.save((function(err) {
          should.not.exist(err);
          testAlternative2.save(done);
        }));
      }));
    }));
    after((function(done) {
      models.Election.remove({}, (function() {
        models.Alternative.remove({}, done);
      }));
    }));
    it('should be able to be found in the db', (function(done) {
      models.Election.findById(testElection._id).populate('alternatives').exec((function(err, el) {
        should.not.exist(err);
        should.exist(el);
        el.title.should.equal(testElection.title, 'retrieved title should match the saved title');
        el.description.should.equal(testElection.description, 'retrieved description should match the saved description');
        el.alternatives[0]._id.toString().should.equal(testAlternative._id.toString());
        el.alternatives[1]._id.toString().should.equal(testAlternative2._id.toString());
        done();
      }));
    }));
  }));
});

//# sourceMappingURL=data:application/json;base64,